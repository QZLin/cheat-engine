name: Build Cheat Engine

on:
  workflow_dispatch:
  workflow_call:
  push:
    branches:
      - master

jobs:
  cache-lazarus:
    runs-on: windows-2022
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    steps:
      - uses: actions/checkout@v3
      - name: Get Lazarus info
        id: get-info
        run: |
          ${{ github.workspace }}\.github\workflows\scripts\RegexExtractFile.ps1 `
            -OutputName lazarus `
            -File README.md `
            -Regex 'lazarus-(?<lazarus>[0-9]+\.[0-9]+\.[0-9]+)-fpc-(?<fpc>[0-9]+\.[0-9]+\.[0-9]+)-cross-i386-win32-win64\.exe' `
            -RegexGroup lazarus
          ${{ github.workspace }}\.github\workflows\scripts\RegexExtractFile.ps1 `
            -OutputName fpc `
            -File README.md `
            -Regex 'lazarus-(?<lazarus>[0-9]+\.[0-9]+\.[0-9]+)-fpc-(?<fpc>[0-9]+\.[0-9]+\.[0-9]+)-cross-i386-win32-win64\.exe' `
            -RegexGroup fpc
          ${{ github.workspace }}\.github\workflows\scripts\RegexExtractFileMultiple.ps1 `
            -OutputName dependencies `
            -File '.\Cheat Engine\cheatengine.lpi' `
            -Regex '(?<=<PackageName Value=").*?(?="\/>)'
      - name: Cache Lazarus
        id: cache-lazarus
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}\work
          key: lazarus-${{ steps.get-info.outputs.lazarus }}-${{ steps.get-info.outputs.fpc }}-${{ format(steps.get-info.outputs.dependencies, '_') }}
      - name: Make working dir
        if: steps.cache-lazarus.outputs.cache-hit != 'true'
        shell: cmd
        run: mkdir ${{ github.workspace }}\work
      - name: Download Lazarus
        if: steps.cache-lazarus.outputs.cache-hit != 'true'
        run: curl.exe -L -o 64bit.exe https://downloads.sourceforge.net/project/lazarus/Lazarus%20Windows%2064%20bits/Lazarus%20${{ steps.get-info.outputs.lazarus }}/lazarus-${{ steps.get-info.outputs.lazarus }}-fpc-${{ steps.get-info.outputs.fpc }}-win64.exe
        working-directory: ${{ github.workspace }}\work
      - name: Install Lazarus
        if: steps.cache-lazarus.outputs.cache-hit != 'true'
        run: ${{ github.workspace }}\.github\workflows\scripts\RunInstaller.ps1 -InstallerFile .\64bit.exe -Arguments '/VERYSILENT /DIR=${{ github.workspace }}\work\lazarus'
        working-directory: ${{ github.workspace }}\work
      - name: Download 32bit compat
        if: steps.cache-lazarus.outputs.cache-hit != 'true'
        run: curl.exe -L -o 32bit.exe https://downloads.sourceforge.net/project/lazarus/Lazarus%20Windows%2064%20bits/Lazarus%20${{ steps.get-info.outputs.lazarus }}/lazarus-${{ steps.get-info.outputs.lazarus }}-fpc-${{ steps.get-info.outputs.fpc }}-cross-i386-win32-win64.exe
        working-directory: ${{ github.workspace }}\work
      - name: Install 32bit compat
        if: steps.cache-lazarus.outputs.cache-hit != 'true'
        run: ${{ github.workspace }}\.github\workflows\scripts\RunInstaller.ps1 -InstallerFile .\32bit.exe -Arguments '/VERYSILENT /DIR=${{ github.workspace }}\work\lazarus'
        working-directory: ${{ github.workspace }}\work
  cache-vs2013:
    runs-on: windows-2022
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    steps:
      - uses: actions/checkout@v3
      - name: Cache VS2013
        id: cache-vs2013
        uses: actions/cache@v3
        with:
          path: |
            ${{ github.workspace }}\vs
            !${{ github.workspace }}\vs\packages\MobileTools
            !${{ github.workspace }}\vs\packages\WindowsPhone81VHD
            !${{ github.workspace }}\vs\packages\Win81_SDK
            !${{ github.workspace }}\vs\Standalone Profiler
          key: VS2013
      - name: Download VS2013
        if: steps.cache-vs2013.outputs.cache-hit != 'true'
        run: curl.exe -L -o vs2013.5_pro_enu.iso http://download.microsoft.com/download/F/2/E/F2EFF589-F7D7-478E-B3AB-15F412DA7DEB/vs2013.5_pro_enu.iso
      - name: Unzip VS2013
        if: steps.cache-vs2013.outputs.cache-hit != 'true'
        run: 7z x vs2013.5_pro_enu.iso -o${{ github.workspace }}\vs
  cache-directx:
    runs-on: windows-2022
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    steps:
      - uses: actions/checkout@v3
      - name: Cache DirectX
        id: cache-directx
        uses: actions/cache@v3
        with:
          path: C:\Program Files (x86)\Microsoft DirectX SDK (June 2010)
          key: DirectX
      - name: Download DirectX
        if: steps.cache-directx.outputs.cache-hit != 'true'
        run: curl.exe -L -o DXSDK_Jun10.exe https://download.microsoft.com/download/A/E/7/AE743F1F-632B-4809-87A9-AA1BB3458E31/DXSDK_Jun10.exe
      - name: Install DirectX
        if: steps.cache-directx.outputs.cache-hit != 'true'
        run: ${{ github.workspace }}\.github\workflows\scripts\RunInstaller.ps1 -InstallerFile .\DXSDK_Jun10.exe -Arguments '/U'
  cache-netdevpack461:
    runs-on: windows-2022
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    steps:
      - uses: actions/checkout@v3
      - name: Cache NETDevPack461
        id: cache-netdevpack461
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}\ndp461-devpack-kb3105179-enu.exe
          key: NETDevPack461
      - name: Download NETDevPack461
        if: steps.cache-netdevpack461.outputs.cache-hit != 'true'
        run: curl.exe -L -o ndp461-devpack-kb3105179-enu.exe https://download.visualstudio.microsoft.com/download/pr/33a48e6c-c0d1-4321-946b-042b92bad691/a9a88bd451286ab9ea015ecc2208d725/ndp461-devpack-kb3105179-enu.exe
  cache-netdevpack472:
    runs-on: windows-2022
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    steps:
      - uses: actions/checkout@v3
      - name: Cache NetDevPack472
        id: cache-netdevpack472
        uses: actions/cache@v3
        with:
          path: C:\Program Files (x86)\Windows Kits\NETFXSDK\4.7.2
          key: NetDevPack472
      - name: Download NetDevPack472
        if: steps.cache-netdevpack472.outputs.cache-hit != 'true'
        run: curl.exe -L -o ndp472-devpack-enu.exe https://download.visualstudio.microsoft.com/download/pr/158dce74-251c-4af3-b8cc-4608621341c8/9c1e178a11f55478e2112714a3897c1a/ndp472-devpack-enu.exe
      - name: Install NetDevPack472
        if: steps.cache-netdevpack472.outputs.cache-hit != 'true'
        run: ${{ github.workspace }}\.github\workflows\scripts\RunInstaller.ps1 -InstallerFile .\ndp472-devpack-enu.exe -Arguments '/quiet /norestart'
  cache-ce-orig:
    runs-on: windows-2022
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    steps:
      - uses: actions/checkout@v3
      - name: Get Cheat Engine info
        id: get-info
        run: |
          .\RegexExtractUrl.ps1 `
            -OutputName ce `
            -Url https://cheatengine.org/downloads.php `
            -Regex 'Download Cheat Engine (?<version>[0-9.]+)' `
            -RegexGroup version
          .\RegexExtractUrl.ps1 `
            -OutputName ceurl `
            -Url https://cheatengine.org/downloads.php `
            -Regex 'download_link.*?href="(?<url>[^"]+)' `
            -RegexGroup url
        working-directory: ${{ github.workspace }}\.github\workflows\scripts
      - name: Cache Cheat Engine
        id: cache-cheat-engine
        uses: actions/cache@v3
        with:
          path: C:\Program Files\Cheat Engine ${{ steps.get-info.outputs.ce }}
          key: CheatEngine${{ steps.get-info.outputs.ce }}
      - name: Download installer
        if: steps.cache-cheat-engine.outputs.cache-hit != 'true'
        run: curl.exe -L -o CheatEngine.exe ${{ steps.get-info.outputs.ceurl }}
      - name: Download extractor
        if: steps.cache-cheat-engine.outputs.cache-hit != 'true'
        run: curl.exe -L -o innounp050.rar https://downloads.sourceforge.net/project/innounp/innounp/innounp%200.50/innounp050.rar
      - name: Extract extractor
        if: steps.cache-cheat-engine.outputs.cache-hit != 'true'
        run: 7z e innounp050.rar
      - name: Extract installer
        if: steps.cache-cheat-engine.outputs.cache-hit != 'true'
        run: .\innounp.exe CheatEngine.exe -x -m
      - name: Get Extracted installer dl path
        if: steps.cache-cheat-engine.outputs.cache-hit != 'true'
        id: extracted-installer
        run: |
          ${{ github.workspace }}\.github\workflows\scripts\RegexExtractFile.ps1 `
            -OutputName ceurl `
            -File .\embedded\CompiledCode.bin `
            -CleanupRegex '[^a-zA-Z0-9.:\/\n\r]' `
            -Regex '(?<url>https:\/\/[a-zA-Z0-9]+\.cloudfront.net\/f\/CheatEngine\/[0-9]+\/CheatEngine[0-9]*\.exe)' `
            -RegexGroup url
      - name: Download Extracted Installer
        if: steps.cache-cheat-engine.outputs.cache-hit != 'true'
        run: curl.exe -L -o CheatEngineExtracted.exe ${{ steps.extracted-installer.outputs.ceurl }}
      - name: Install Cheat Engine
        if: steps.cache-cheat-engine.outputs.cache-hit != 'true'
        run: ${{ github.workspace }}\.github\workflows\scripts\RunInstaller.ps1 -InstallerFile .\CheatEngineExtracted.exe -Arguments '/VERYSILENT /ZBDIST'
  build:
    needs: [cache-lazarus, cache-vs2013, cache-directx, cache-netdevpack461, cache-netdevpack472, cache-ce-orig]
    runs-on: windows-2022
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    steps:
      - uses: actions/checkout@v3
      - name: Get Lazarus info
        id: get-info
        run: |
          ${{ github.workspace }}\.github\workflows\scripts\RegexExtractFile.ps1 `
            -OutputName lazarus `
            -File README.md `
            -Regex 'lazarus-(?<lazarus>[0-9]+\.[0-9]+\.[0-9]+)-fpc-(?<fpc>[0-9]+\.[0-9]+\.[0-9]+)-cross-i386-win32-win64\.exe' `
            -RegexGroup lazarus
          ${{ github.workspace }}\.github\workflows\scripts\RegexExtractFile.ps1 `
            -OutputName fpc `
            -File README.md `
            -Regex 'lazarus-(?<lazarus>[0-9]+\.[0-9]+\.[0-9]+)-fpc-(?<fpc>[0-9]+\.[0-9]+\.[0-9]+)-cross-i386-win32-win64\.exe' `
            -RegexGroup fpc
          ${{ github.workspace }}\.github\workflows\scripts\RegexExtractFileMultiple.ps1 `
            -OutputName dependencies `
            -File '.\Cheat Engine\cheatengine.lpi' `
            -Regex '(?<=<PackageName Value=").*?(?="\/>)'
          ${{ github.workspace }}\.github\workflows\scripts\RegexExtractUrl.ps1 `
            -OutputName ce `
            -Url https://cheatengine.org/downloads.php `
            -Regex 'Download Cheat Engine (?<version>[0-9.]+)' `
            -RegexGroup version
      - name: Load Lazarus Cache
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}\work
          key: lazarus-${{ steps.get-info.outputs.lazarus }}-${{ steps.get-info.outputs.fpc }}-${{ format(steps.get-info.outputs.dependencies, '_') }}
      - name: Add Lazarus to path
        run: |
          echo "${{github.workspace}}\work\lazarus" >> $env:GITHUB_PATH
          echo "${{github.workspace}}\work\lazarus\fpc\${{ steps.get-info.outputs.fpc }}" >> $env:GITHUB_PATH
      - name: Apply fixes
        run: py ./.github/workflows/scripts/fixes.py
      - name: Build 32-Bit
        if: ${{ success() || failure() }}
        run: lazbuild --build-mode="Release 32-bit" --no-write-project "Cheat Engine/cheatengine.lpi"
      - name: Build 64-Bit
        if: ${{ success() || failure() }}
        run: lazbuild --build-mode="Release 64-bit" --no-write-project "Cheat Engine/cheatengine.lpi"
      - name: Build 64-Bit O4 AVX2
        if: ${{ success() || failure() }}
        run: lazbuild --build-mode="Release 64-bit O4 AVX2" --no-write-project "Cheat Engine/cheatengine.lpi"
      - name: Build 32-Bit speedhack
        if: ${{ success() || failure() }}
        run: lazbuild --build-mode="32-bit" --no-write-project "Cheat Engine/speedhack/speedhack.lpi"
      - name: Build 64-Bit speedhack
        if: ${{ success() || failure() }}
        run: lazbuild --build-mode="64-bit" --no-write-project "Cheat Engine/speedhack/speedhack.lpi"
      - name: Build 32-Bit luaclient
        if: ${{ success() || failure() }}
        run: lazbuild --build-mode="Release 32" --no-write-project "Cheat Engine/luaclient/luaclient.lpi"
      - name: Build 64-Bit luaclient
        if: ${{ success() || failure() }}
        run: lazbuild --build-mode="Release 64" --no-write-project "Cheat Engine/luaclient/luaclient.lpi"
      - name: Build 32-Bit vehdebug
        if: ${{ success() || failure() }}
        run: lazbuild --build-mode="release 32" --no-write-project "Cheat Engine/VEHDebug/vehdebug.lpi"
      - name: Build 64-Bit vehdebug
        if: ${{ success() || failure() }}
        run: lazbuild --build-mode="release 64" --no-write-project "Cheat Engine/VEHDebug/vehdebug.lpi"
      - name: Build 32-Bit allochook
        if: ${{ success() || failure() }}
        run: lazbuild --build-mode="32" --no-write-project "Cheat Engine/allochook/allochook.lpi"
      - name: Build 64-Bit allochook
        if: ${{ success() || failure() }}
        run: lazbuild --build-mode="64" --no-write-project "Cheat Engine/allochook/allochook.lpi"
      - name: Build ceregreset
        if: ${{ success() || failure() }}
        run: lazbuild --build-mode="Release" --no-write-project "Cheat Engine/ceregreset/ceregreset.lpi"
      - name: Build 32-Bit tutorial
        if: ${{ success() || failure() }}
        run: lazbuild --build-mode="release 32-Bit" --no-write-project "Cheat Engine/Tutorial/tutorial.lpi"
      - name: Build 64-Bit tutorial
        if: ${{ success() || failure() }}
        run: lazbuild --build-mode="release 64-Bit" --no-write-project "Cheat Engine/Tutorial/tutorial.lpi"
      - name: Build windowsrepair
        if: ${{ success() || failure() }}
        run: lazbuild --build-mode="Release" --no-write-project "Cheat Engine/windowsrepair/windowsrepair.lpi"
      - name: Build 32-Bit winhook
        if: ${{ success() || failure() }}
        run: lazbuild --build-mode="Release 32" --no-write-project "Cheat Engine/winhook/winhook.lpi"
      - name: Build 64-Bit winhook
        if: ${{ success() || failure() }}
        run: lazbuild --build-mode="Release 64" --no-write-project "Cheat Engine/winhook/winhook.lpi"
      - name: Load VS2013 Cache
        if: ${{ success() || failure() }}
        uses: actions/cache@v3
        with:
          path: |
            ${{ github.workspace }}\vs
            !${{ github.workspace }}\vs\packages\MobileTools
            !${{ github.workspace }}\vs\packages\WindowsPhone81VHD
            !${{ github.workspace }}\vs\packages\Win81_SDK
            !${{ github.workspace }}\vs\Standalone Profiler
          key: VS2013
      - name: Install VS2013
        if: ${{ success() || failure() }}
        run: ${{ github.workspace }}\.github\workflows\scripts\RunInstaller.ps1 -InstallerFile .\vs\vs_professional.exe -Arguments '/Quiet /NoRestart /AdminFile ${{ github.workspace }}\.github\workflows\config\VS2013AdminDeployment.xml'
      - name: Load DirectX Cache
        if: ${{ success() || failure() }}
        uses: actions/cache@v3
        with:
          path: C:\Program Files (x86)\Microsoft DirectX SDK (June 2010)
          key: DirectX
      - name: Add msbuild to PATH
        if: ${{ success() || failure() }}
        uses: microsoft/setup-msbuild@v1.1.3
      - name: Build 32-Bit Direct x mess
        if: ${{ success() || failure() }}
        run: "msbuild -property:Configuration=Release -property:Platform=Win32"
        working-directory: ${{ github.workspace }}\Cheat Engine\Direct x mess
      - name: Build 64-Bit Direct x mess
        if: ${{ success() || failure() }}
        run: "msbuild -property:Configuration=Release -property:Platform=x64"
        working-directory: ${{ github.workspace }}\Cheat Engine\Direct x mess
      - name: Install winxp component on windows 2022
        if: ${{ success() || failure() }}
        run: .\InstallWinXpComponent.ps1
        working-directory: ${{ github.workspace }}\.github\workflows\scripts
      - name: Load NETDevPack461 Cache
        if: ${{ success() || failure() }}
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}\ndp461-devpack-kb3105179-enu.exe
          key: NETDevPack461
      - name: Install NETDevPack461
        if: ${{ success() || failure() }}
        run: ${{ github.workspace }}\.github\workflows\scripts\RunInstaller.ps1 -InstallerFile .\ndp461-devpack-kb3105179-enu.exe -Arguments '/quiet /norestart'
      - name: Build AnyCPU DotNetCompiler
        if: ${{ success() || failure() }}
        run: "msbuild -property:Configuration=Release"
        working-directory: ${{ github.workspace }}\Cheat Engine\DotNetCompiler\CSCompiler
      - name: Build 32-Bit MonoDataCollector
        if: ${{ success() || failure() }}
        run: "msbuild -property:Configuration=Release -property:Platform=Win32"
        working-directory: ${{ github.workspace }}\Cheat Engine\MonoDataCollector
      - name: Build 64-Bit MonoDataCollector
        if: ${{ success() || failure() }}
        run: "msbuild -property:Configuration=Release -property:Platform=x64"
        working-directory: ${{ github.workspace }}\Cheat Engine\MonoDataCollector
      - name: Load NetDevPack472 Cache
        if: ${{ success() || failure() }}
        uses: actions/cache@v3
        with:
          path: C:\Program Files (x86)\Windows Kits\NETFXSDK\4.7.2
          key: NetDevPack472
      - name: Build 32-Bit DotNetDataCollector
        if: ${{ success() || failure() }}
        run: "msbuild -property:Configuration=Release -property:Platform=Win32"
        working-directory: ${{ github.workspace }}\Cheat Engine\DotNetDataCollector
      - name: Build 64-Bit DotNetDataCollector
        if: ${{ success() || failure() }}
        run: "msbuild -property:Configuration=Release -property:Platform=x64"
        working-directory: ${{ github.workspace }}\Cheat Engine\DotNetDataCollector
      - name: Build DotNetInvasiveDataCollector
        if: ${{ success() || failure() }}
        run: "msbuild -property:Configuration=Release"
        working-directory: ${{ github.workspace }}\Cheat Engine\DotNetInvasiveDataCollector\DotNetInterface2
      - name: Build Tcc 32-32
        if: ${{ success() || failure() }}
        run: "msbuild -property:Configuration='Output to 32 (Release)' -property:Platform=Win32"
        working-directory: ${{ github.workspace }}\Cheat Engine\tcclib\win32\tcc
      - name: Build Tcc 32-32 Linux
        if: ${{ success() || failure() }}
        run: "msbuild -property:Configuration='Output to 32 Linux ABI (Release)' -property:Platform=Win32"
        working-directory: ${{ github.workspace }}\Cheat Engine\tcclib\win32\tcc
      - name: Build Tcc 64-32
        if: ${{ success() || failure() }}
        run: "msbuild -property:Configuration='Output to 64 (Release)' -property:Platform=Win32"
        working-directory: ${{ github.workspace }}\Cheat Engine\tcclib\win32\tcc
      - name: Build Tcc 64-32 Linux
        if: ${{ success() || failure() }}
        run: "msbuild -property:Configuration='Output to 64 Linux ABI (Release)' -property:Platform=Win32"
        working-directory: ${{ github.workspace }}\Cheat Engine\tcclib\win32\tcc
      - name: Build Tcc 64-64
        if: ${{ success() || failure() }}
        run: "msbuild -property:Configuration='Output to 64 (Release)' -property:Platform=x64"
        working-directory: ${{ github.workspace }}\Cheat Engine\tcclib\win32\tcc
      - name: Build Tcc 64-64 Linux
        if: ${{ success() || failure() }}
        run: "msbuild -property:Configuration='Output to 64 Linux ABI (Release)' -property:Platform=x64"
        working-directory: ${{ github.workspace }}\Cheat Engine\tcclib\win32\tcc
      - name: Add plugins
        if: ${{ success() || failure() }}
        run: xcopy plugin bin\plugins\ /E/H
        working-directory: ${{ github.workspace }}\Cheat Engine
      - name: Load Cheat Engine Cache
        if: ${{ success() || failure() }}
        id: cache-cheat-engine
        uses: actions/cache@v3
        with:
          path: C:\Program Files\Cheat Engine ${{ steps.get-info.outputs.ce }}
          key: CheatEngine${{ steps.get-info.outputs.ce }}
      - name: Copy dbk
        if: ${{ success() || failure() }}
        run: |
          xcopy "C:\Program Files\Cheat Engine ${{ steps.get-info.outputs.ce }}\dbk*.sys" bin\
          xcopy "C:\Program Files\Cheat Engine ${{ steps.get-info.outputs.ce }}\vmdisk.*" bin\
          xcopy "C:\Program Files\Cheat Engine ${{ steps.get-info.outputs.ce }}\Kernelmoduleunloader.exe" bin\
        working-directory: ${{ github.workspace }}\Cheat Engine
      - name: Remove debug files
        if: ${{ success() || failure() }}
        shell: bash
        run: |
          shopt -s globstar
          rm -rf ./**/*.pdb
          rm -rf ./**/*.iobj
          rm -rf ./**/*.ipdb
          rm -rf ./**/*.dbg
        working-directory: ${{ github.workspace }}\Cheat Engine\bin
      - name: Zip artifact
        if: ${{ success() || failure() }}
        run: 7z a -tzip release.zip * -r
        working-directory: "./Cheat Engine/bin"
      - name: Release artifact
        if: ${{ success() || failure() }}
        uses: actions/upload-artifact@v3
        with:
          name: Release
          path: "Cheat Engine/bin/release.zip"

name: Build Cheat Engine

on:
  workflow_dispatch:
  workflow_call:
    inputs:
      info-only:
        required: false
        type: boolean
    outputs:
      vs2013:
        value: ${{ jobs.get-paths.outputs.vs2013 }}
      xp:
        value: ${{ jobs.get-paths.outputs.xp }}
  push:
    branches:
      - master

jobs:
  cache-lazarus:
    runs-on: windows-2022
    if: ${{ !contains(github.event.head_commit.message, '[skip ci]') && !inputs.info-only }}
    steps:
      - uses: actions/checkout@v4
      - name: Use GNU tar
        shell: cmd
        run: echo C:\Program Files\Git\usr\bin>>"%GITHUB_PATH%"
      - name: Get Lazarus info
        id: get-info
        run: |
          ${{ github.workspace }}\.github\workflows\scripts\RegexExtractFile.ps1 `
            -OutputName lazarus `
            -File README.md `
            -Regex 'lazarus-(?<lazarus>[0-9]+\.[0-9]+\.[0-9]+)-fpc-(?<fpc>[0-9]+\.[0-9]+\.[0-9]+)-cross-i386-win32-win64\.exe' `
            -RegexGroup lazarus
          ${{ github.workspace }}\.github\workflows\scripts\RegexExtractFile.ps1 `
            -OutputName fpc `
            -File README.md `
            -Regex 'lazarus-(?<lazarus>[0-9]+\.[0-9]+\.[0-9]+)-fpc-(?<fpc>[0-9]+\.[0-9]+\.[0-9]+)-cross-i386-win32-win64\.exe' `
            -RegexGroup fpc
          ${{ github.workspace }}\.github\workflows\scripts\RegexExtractFileMultiple.ps1 `
            -OutputName dependencies `
            -File '.\Cheat Engine\cheatengine.lpi' `
            -Regex '(?<=<PackageName Value=").*?(?="\/>)'
      - name: Cache Lazarus
        id: cache-lazarus
        uses: actions/cache@v3
        with:
          lookup-only: true
          path: ${{ github.workspace }}\work
          key: lazarus-${{ steps.get-info.outputs.lazarus }}-${{ steps.get-info.outputs.fpc }}-${{ format(steps.get-info.outputs.dependencies, '_') }}
      - name: Make working dir
        if: steps.cache-lazarus.outputs.cache-hit != 'true'
        shell: cmd
        run: mkdir ${{ github.workspace }}\work
      - name: Download Lazarus
        if: steps.cache-lazarus.outputs.cache-hit != 'true'
        run: curl.exe -L --retry 15 --retry-all-errors --retry-delay 5 -o 64bit.exe https://downloads.sourceforge.net/project/lazarus/Lazarus%20Windows%2064%20bits/Lazarus%20${{ steps.get-info.outputs.lazarus }}/lazarus-${{ steps.get-info.outputs.lazarus }}-fpc-${{ steps.get-info.outputs.fpc }}-win64.exe
        working-directory: ${{ github.workspace }}\work
      - name: Install Lazarus
        if: steps.cache-lazarus.outputs.cache-hit != 'true'
        run: ${{ github.workspace }}\.github\workflows\scripts\RunInstaller.ps1 -InstallerFile .\64bit.exe -Arguments '/VERYSILENT /DIR=${{ github.workspace }}\work\lazarus'
        working-directory: ${{ github.workspace }}\work
      - name: Download 32bit compat
        if: steps.cache-lazarus.outputs.cache-hit != 'true'
        run: curl.exe -L --retry 15 --retry-all-errors --retry-delay 5 -o 32bit.exe https://downloads.sourceforge.net/project/lazarus/Lazarus%20Windows%2064%20bits/Lazarus%20${{ steps.get-info.outputs.lazarus }}/lazarus-${{ steps.get-info.outputs.lazarus }}-fpc-${{ steps.get-info.outputs.fpc }}-cross-i386-win32-win64.exe
        working-directory: ${{ github.workspace }}\work
      - name: Install 32bit compat
        if: steps.cache-lazarus.outputs.cache-hit != 'true'
        run: ${{ github.workspace }}\.github\workflows\scripts\RunInstaller.ps1 -InstallerFile .\32bit.exe -Arguments '/VERYSILENT /DIR=${{ github.workspace }}\work\lazarus'
        working-directory: ${{ github.workspace }}\work
  cache-xp:
    runs-on: windows-2022
    if: ${{ !contains(github.event.head_commit.message, '[skip ci]') && !inputs.info-only }}
    needs: get-paths
    steps:
      - uses: actions/checkout@v4
      - name: Use GNU tar
        shell: cmd
        run: echo C:\Program Files\Git\usr\bin>>"%GITHUB_PATH%"
      - name: Cache XP
        id: cache-xp
        uses: actions/cache@v3
        with:
          lookup-only: true
          path: ${{ needs.get-paths.outputs.xp }}
          key: XP
      - name: Install winxp component on windows 2022
        if: steps.cache-xp.outputs.cache-hit != 'true'
        run: .\InstallWinXpComponent.ps1
        working-directory: ${{ github.workspace }}\.github\workflows\scripts
  cache-vs2013:
    runs-on: windows-2022
    if: ${{ !contains(github.event.head_commit.message, '[skip ci]') && !inputs.info-only }}
    needs: get-paths
    steps:
      - uses: actions/checkout@v4
      - name: Use GNU tar
        shell: cmd
        run: echo C:\Program Files\Git\usr\bin>>"%GITHUB_PATH%"
      - name: Cache VS2013
        id: cache-vs2013
        uses: actions/cache@v3
        with:
          lookup-only: true
          path: ${{ needs.get-paths.outputs.vs2013 }}
          key: VS2013
      - name: Download VS2013
        if: steps.cache-vs2013.outputs.cache-hit != 'true'
        run: curl.exe -L -o VS2013_RTM_DskExp_ENU.iso https://download.microsoft.com/download/7/2/E/72E0F986-D247-4289-B9DC-C4FB07374894/VS2013_RTM_DskExp_ENU.iso
      - name: Unzip VS2013
        if: steps.cache-vs2013.outputs.cache-hit != 'true'
        run: 7z x VS2013_RTM_DskExp_ENU.iso -o${{ github.workspace }}\vs
      - name: Install VS2013
        if: steps.cache-vs2013.outputs.cache-hit != 'true'
        run: ${{ github.workspace }}\.github\workflows\scripts\RunInstaller.ps1 -InstallerFile .\vs\wdexpress_full.exe -Arguments '/Quiet /NoRestart /NoWeb'
  cache-directx:
    runs-on: windows-2022
    if: ${{ !contains(github.event.head_commit.message, '[skip ci]') && !inputs.info-only }}
    steps:
      - uses: actions/checkout@v4
      - name: Use GNU tar
        shell: cmd
        run: echo C:\Program Files\Git\usr\bin>>"%GITHUB_PATH%"
      - name: Cache DirectX
        id: cache-directx
        uses: actions/cache@v3
        with:
          lookup-only: true
          path: C:\Program Files (x86)\Microsoft DirectX SDK (June 2010)
          key: DirectX
      - name: Download DirectX
        if: steps.cache-directx.outputs.cache-hit != 'true'
        run: curl.exe -L -o DXSDK_Jun10.exe https://download.microsoft.com/download/A/E/7/AE743F1F-632B-4809-87A9-AA1BB3458E31/DXSDK_Jun10.exe
      - name: Install DirectX
        if: steps.cache-directx.outputs.cache-hit != 'true'
        run: ${{ github.workspace }}\.github\workflows\scripts\RunInstaller.ps1 -InstallerFile .\DXSDK_Jun10.exe -Arguments '/U'
  cache-netdevpack461:
    runs-on: windows-2022
    if: ${{ !contains(github.event.head_commit.message, '[skip ci]') && !inputs.info-only }}
    steps:
      - uses: actions/checkout@v4
      - name: Use GNU tar
        shell: cmd
        run: echo C:\Program Files\Git\usr\bin>>"%GITHUB_PATH%"
      - name: Cache NETDevPack461
        id: cache-netdevpack461
        uses: actions/cache@v3
        with:
          lookup-only: true
          path: ${{ github.workspace }}\ndp461-devpack-kb3105179-enu.exe
          key: NETDevPack461
      - name: Download NETDevPack461
        if: steps.cache-netdevpack461.outputs.cache-hit != 'true'
        run: curl.exe -L -o ndp461-devpack-kb3105179-enu.exe https://download.visualstudio.microsoft.com/download/pr/33a48e6c-c0d1-4321-946b-042b92bad691/a9a88bd451286ab9ea015ecc2208d725/ndp461-devpack-kb3105179-enu.exe
  cache-netdevpack472:
    runs-on: windows-2022
    if: ${{ !contains(github.event.head_commit.message, '[skip ci]') && !inputs.info-only }}
    steps:
      - uses: actions/checkout@v4
      - name: Use GNU tar
        shell: cmd
        run: echo C:\Program Files\Git\usr\bin>>"%GITHUB_PATH%"
      - name: Cache NetDevPack472
        id: cache-netdevpack472
        uses: actions/cache@v3
        with:
          lookup-only: true
          path: C:\Program Files (x86)\Windows Kits\NETFXSDK\4.7.2
          key: NetDevPack472
      - name: Download NetDevPack472
        if: steps.cache-netdevpack472.outputs.cache-hit != 'true'
        run: curl.exe -L -o ndp472-devpack-enu.exe https://download.visualstudio.microsoft.com/download/pr/158dce74-251c-4af3-b8cc-4608621341c8/9c1e178a11f55478e2112714a3897c1a/ndp472-devpack-enu.exe
      - name: Install NetDevPack472
        if: steps.cache-netdevpack472.outputs.cache-hit != 'true'
        run: ${{ github.workspace }}\.github\workflows\scripts\RunInstaller.ps1 -InstallerFile .\ndp472-devpack-enu.exe -Arguments '/quiet /norestart'
  cache-ce-orig:
    runs-on: windows-2022
    if: ${{ !contains(github.event.head_commit.message, '[skip ci]') && !inputs.info-only }}
    steps:
      - uses: actions/checkout@v4
      - name: Use GNU tar
        shell: cmd
        run: echo C:\Program Files\Git\usr\bin>>"%GITHUB_PATH%"
      - name: Get Cheat Engine info
        id: get-info
        run: |
          .\RegexExtractUrl.ps1 `
            -OutputName ce `
            -Url https://cheatengine.org/downloads.php `
            -Regex 'Download Cheat Engine (?<version>[0-9.]+)' `
            -RegexGroup version
          .\RegexExtractUrl.ps1 `
            -OutputName ceurl `
            -Url https://cheatengine.org/downloads.php `
            -Regex 'download_link.*?href="(?<url>[^"]+)' `
            -RegexGroup url
        working-directory: ${{ github.workspace }}\.github\workflows\scripts
      - name: Cache Cheat Engine
        id: cache-cheat-engine
        uses: actions/cache@v3
        with:
          lookup-only: true
          path: C:\Program Files\Cheat Engine ${{ steps.get-info.outputs.ce }}
          key: CheatEngine${{ steps.get-info.outputs.ce }}
      - uses: actions/setup-node@v4
        if: steps.cache-cheat-engine.outputs.cache-hit != 'true'
        with:
          node-version: 18
      - name: Generate User Agent
        if: steps.cache-cheat-engine.outputs.cache-hit != 'true'
        id: generate-ua
        run: node --experimental-network-imports --no-warnings ./.github/workflows/scripts/getUA.mjs
      - name: Download installer
        if: steps.cache-cheat-engine.outputs.cache-hit != 'true'
        run: curl.exe -A '${{ steps.generate-ua.outputs.ua }}' -L -o CheatEngine.exe ${{ steps.get-info.outputs.ceurl }}
      - name: Download extractor
        if: steps.cache-cheat-engine.outputs.cache-hit != 'true'
        run: curl.exe -L --retry 15 --retry-all-errors --retry-delay 5 -o innounp050.rar https://downloads.sourceforge.net/project/innounp/innounp/innounp%200.50/innounp050.rar
      - name: Extract extractor
        if: steps.cache-cheat-engine.outputs.cache-hit != 'true'
        run: 7z e innounp050.rar
      - name: Extract installer
        if: steps.cache-cheat-engine.outputs.cache-hit != 'true'
        run: .\innounp.exe CheatEngine.exe -x -m
      - name: Get Extracted installer dl path
        if: steps.cache-cheat-engine.outputs.cache-hit != 'true'
        id: extracted-installer
        run: |
          ${{ github.workspace }}\.github\workflows\scripts\RegexExtractFile.ps1 `
            -OutputName ceurl `
            -File .\embedded\CompiledCode.bin `
            -CleanupRegex '[^a-zA-Z0-9.:\/\n\r]' `
            -Regex '(?<url>https:\/\/[a-zA-Z0-9]+\.cloudfront.net\/f\/CheatEngine\/[0-9]+\/CheatEngine[0-9]*\.exe)' `
            -RegexGroup url
      - name: Download Extracted Installer
        if: steps.cache-cheat-engine.outputs.cache-hit != 'true'
        run: curl.exe -L -o CheatEngineExtracted.exe ${{ steps.extracted-installer.outputs.ceurl }}
      - name: Install Cheat Engine
        if: steps.cache-cheat-engine.outputs.cache-hit != 'true'
        run: ${{ github.workspace }}\.github\workflows\scripts\RunInstaller.ps1 -InstallerFile .\CheatEngineExtracted.exe -Arguments '/VERYSILENT /ZBDIST'
  cache-cuda:
    runs-on: windows-2022
    if: ${{ !contains(github.event.head_commit.message, '[skip ci]') && !inputs.info-only }}
    needs: get-paths
    steps:
      - uses: actions/checkout@v4
      - name: Use GNU tar
        shell: cmd
        run: echo C:\Program Files\Git\usr\bin>>"%GITHUB_PATH%"
      - name: Cache CUDA
        id: cache-cuda
        uses: actions/cache@v3
        with:
          lookup-only: true
          path: ${{ needs.get-paths.outputs.cuda }}
          key: CUDA
      - name: Install CUDA
        if: steps.cache-cuda.outputs.cache-hit != 'true'
        uses: Jimver/cuda-toolkit@v0.2.11
        id: cuda-toolkit
        with:
          cuda: '12.2.0'
          use-github-cache: false
      - name: Save CUDA Path
        if: steps.cache-cuda.outputs.cache-hit != 'true'
        run: |
          ${{ github.workspace }}\.github\workflows\scripts\WriteToFile.ps1 `
            -Var '${{ steps.cuda-toolkit.outputs.CUDA_PATH }}' `
            -OutputPath ${{ github.workspace }}\CUDA
  build:
    needs: [cache-lazarus, cache-vs2013, cache-xp, cache-directx, cache-netdevpack461, cache-netdevpack472, cache-ce-orig, cache-cuda, get-paths]
    runs-on: windows-2022
    if: ${{ !contains(github.event.head_commit.message, '[skip ci]') && !inputs.info-only }}
    steps:
      - uses: actions/checkout@v4
      - name: Use GNU tar
        shell: cmd
        run: echo C:\Program Files\Git\usr\bin>>"%GITHUB_PATH%"
      - name: Get Lazarus info
        id: get-info
        run: |
          ${{ github.workspace }}\.github\workflows\scripts\RegexExtractFile.ps1 `
            -OutputName lazarus `
            -File README.md `
            -Regex 'lazarus-(?<lazarus>[0-9]+\.[0-9]+\.[0-9]+)-fpc-(?<fpc>[0-9]+\.[0-9]+\.[0-9]+)-cross-i386-win32-win64\.exe' `
            -RegexGroup lazarus
          ${{ github.workspace }}\.github\workflows\scripts\RegexExtractFile.ps1 `
            -OutputName fpc `
            -File README.md `
            -Regex 'lazarus-(?<lazarus>[0-9]+\.[0-9]+\.[0-9]+)-fpc-(?<fpc>[0-9]+\.[0-9]+\.[0-9]+)-cross-i386-win32-win64\.exe' `
            -RegexGroup fpc
          ${{ github.workspace }}\.github\workflows\scripts\RegexExtractFileMultiple.ps1 `
            -OutputName dependencies `
            -File '.\Cheat Engine\cheatengine.lpi' `
            -Regex '(?<=<PackageName Value=").*?(?="\/>)'
          ${{ github.workspace }}\.github\workflows\scripts\RegexExtractUrl.ps1 `
            -OutputName ce `
            -Url https://cheatengine.org/downloads.php `
            -Regex 'Download Cheat Engine (?<version>[0-9.]+)' `
            -RegexGroup version
      - name: Load Lazarus Cache
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}\work
          key: lazarus-${{ steps.get-info.outputs.lazarus }}-${{ steps.get-info.outputs.fpc }}-${{ format(steps.get-info.outputs.dependencies, '_') }}
          fail-on-cache-miss: true
      - name: Add Lazarus to path
        shell: cmd
        run: |
          echo ${{github.workspace}}\work\lazarus>>"%GITHUB_PATH%"
          echo ${{github.workspace}}\work\lazarus\fpc\${{ steps.get-info.outputs.fpc }}>>"%GITHUB_PATH%"
      - name: Apply fixes
        run: py ./.github/workflows/scripts/fixes.py
      - name: Build 32-Bit
        if: ${{ success() || failure() }}
        run: lazbuild --build-mode="Release 32-bit" --no-write-project "Cheat Engine/cheatengine.lpi"
      - name: Build 64-Bit
        if: ${{ success() || failure() }}
        run: lazbuild --build-mode="Release 64-bit" --no-write-project "Cheat Engine/cheatengine.lpi"
      - name: Build 64-Bit O4 AVX2
        if: ${{ success() || failure() }}
        run: lazbuild --build-mode="Release 64-bit O4 AVX2" --no-write-project "Cheat Engine/cheatengine.lpi"
      - name: Build cepack
        if: ${{ success() || failure() }}
        run: lazbuild --build-mode="Default" --no-write-project "Cheat Engine/cepack/cepack.lpi"
      - name: Build 32-Bit speedhack
        if: ${{ success() || failure() }}
        run: lazbuild --build-mode="32-bit" --no-write-project "Cheat Engine/speedhack/speedhack.lpi"
      - name: Build 64-Bit speedhack
        if: ${{ success() || failure() }}
        run: lazbuild --build-mode="64-bit" --no-write-project "Cheat Engine/speedhack/speedhack.lpi"
      - name: Build 32-Bit luaclient
        if: ${{ success() || failure() }}
        run: lazbuild --build-mode="Release 32" --no-write-project "Cheat Engine/luaclient/luaclient.lpi"
      - name: Build 64-Bit luaclient
        if: ${{ success() || failure() }}
        run: lazbuild --build-mode="Release 64" --no-write-project "Cheat Engine/luaclient/luaclient.lpi"
      - name: Build 32-Bit vehdebug
        if: ${{ success() || failure() }}
        run: lazbuild --build-mode="release 32" --no-write-project "Cheat Engine/VEHDebug/vehdebug.lpi"
      - name: Build 64-Bit vehdebug
        if: ${{ success() || failure() }}
        run: lazbuild --build-mode="release 64" --no-write-project "Cheat Engine/VEHDebug/vehdebug.lpi"
      - name: Build 32-Bit allochook
        if: ${{ success() || failure() }}
        run: lazbuild --build-mode="32" --no-write-project "Cheat Engine/allochook/allochook.lpi"
      - name: Build 64-Bit allochook
        if: ${{ success() || failure() }}
        run: lazbuild --build-mode="64" --no-write-project "Cheat Engine/allochook/allochook.lpi"
      - name: Build ceregreset
        if: ${{ success() || failure() }}
        run: lazbuild --build-mode="Release" --no-write-project "Cheat Engine/ceregreset/ceregreset.lpi"
      - name: Build ceregreset runtimemod
        if: ${{ success() || failure() }}
        run: lazbuild --build-mode="Release runtime mod" --no-write-project "Cheat Engine/ceregreset/ceregreset.lpi"
      - name: Build 32-Bit tutorial
        if: ${{ success() || failure() }}
        run: lazbuild --build-mode="release 32-Bit" --no-write-project "Cheat Engine/Tutorial/tutorial.lpi"
      - name: Build 64-Bit tutorial
        if: ${{ success() || failure() }}
        run: lazbuild --build-mode="release 64-Bit" --no-write-project "Cheat Engine/Tutorial/tutorial.lpi"
      - name: Build windowsrepair
        if: ${{ success() || failure() }}
        run: lazbuild --build-mode="Release" --no-write-project "Cheat Engine/windowsrepair/windowsrepair.lpi"
      - name: Build 32-Bit winhook
        if: ${{ success() || failure() }}
        run: lazbuild --build-mode="Release 32" --no-write-project "Cheat Engine/winhook/winhook.lpi"
      - name: Build 64-Bit winhook
        if: ${{ success() || failure() }}
        run: lazbuild --build-mode="Release 64" --no-write-project "Cheat Engine/winhook/winhook.lpi"
      - name: Build Cheat Engine launcher
        if: ${{ success() || failure() }}
        run: lazbuild --build-mode="release" --no-write-project "Cheat Engine/launcher/cheatengine.lpi"
      - name: Build Cheat Engine launcher rtmod
        if: ${{ success() || failure() }}
        run: lazbuild --build-mode="release rtmod" --no-write-project "Cheat Engine/launcher/cheatengine.lpi"
      - name: Load VS2013 Cache
        if: ${{ success() || failure() }}
        uses: actions/cache@v3
        with:
          path: ${{ needs.get-paths.outputs.vs2013 }}
          key: VS2013
          fail-on-cache-miss: true
      - name: Apply VS2013 reg
        if: ${{ success() || failure() }}
        run: regedit /s vs2013.reg
        working-directory: ${{ github.workspace }}\.github\workflows\scripts
      - name: Load DirectX Cache
        if: ${{ success() || failure() }}
        uses: actions/cache@v3
        with:
          path: C:\Program Files (x86)\Microsoft DirectX SDK (June 2010)
          key: DirectX
          fail-on-cache-miss: true
      - name: Add msbuild to PATH
        if: ${{ success() || failure() }}
        uses: microsoft/setup-msbuild@v1
      - name: Build 32-Bit Direct x mess
        if: ${{ success() || failure() }}
        run: "msbuild -property:Configuration=Release -property:Platform=Win32"
        working-directory: ${{ github.workspace }}\Cheat Engine\Direct x mess
      - name: Build 64-Bit Direct x mess
        if: ${{ success() || failure() }}
        run: "msbuild -property:Configuration=Release -property:Platform=x64"
        working-directory: ${{ github.workspace }}\Cheat Engine\Direct x mess
      - name: Load XP Cache
        if: ${{ success() || failure() }}
        uses: actions/cache@v3
        with:
          path: ${{ needs.get-paths.outputs.xp }}
          key: XP
          fail-on-cache-miss: true
      - name: Apply XP reg
        if: ${{ success() || failure() }}
        run: regedit /s xp.reg
        working-directory: ${{ github.workspace }}\.github\workflows\scripts
      - name: Load NETDevPack461 Cache
        if: ${{ success() || failure() }}
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}\ndp461-devpack-kb3105179-enu.exe
          key: NETDevPack461
          fail-on-cache-miss: true
      - name: Install NETDevPack461
        if: ${{ success() || failure() }}
        run: ${{ github.workspace }}\.github\workflows\scripts\RunInstaller.ps1 -InstallerFile .\ndp461-devpack-kb3105179-enu.exe -Arguments '/quiet /norestart'
      - name: Build AnyCPU DotNetCompiler
        if: ${{ success() || failure() }}
        run: "msbuild -property:Configuration=Release"
        working-directory: ${{ github.workspace }}\Cheat Engine\DotNetCompiler\CSCompiler
      - name: Build 32-Bit MonoDataCollector
        if: ${{ success() || failure() }}
        run: "msbuild -property:Configuration=Release -property:Platform=Win32"
        working-directory: ${{ github.workspace }}\Cheat Engine\MonoDataCollector
      - name: Build 64-Bit MonoDataCollector
        if: ${{ success() || failure() }}
        run: "msbuild -property:Configuration=Release -property:Platform=x64"
        working-directory: ${{ github.workspace }}\Cheat Engine\MonoDataCollector
      - name: Load NetDevPack472 Cache
        if: ${{ success() || failure() }}
        uses: actions/cache@v3
        with:
          path: C:\Program Files (x86)\Windows Kits\NETFXSDK\4.7.2
          key: NetDevPack472
          fail-on-cache-miss: true
      - name: Build 32-Bit DotNetDataCollector
        if: ${{ success() || failure() }}
        run: "msbuild -property:Configuration=Release -property:Platform=Win32"
        working-directory: ${{ github.workspace }}\Cheat Engine\DotNetDataCollector
      - name: Build 64-Bit DotNetDataCollector
        if: ${{ success() || failure() }}
        run: "msbuild -property:Configuration=Release -property:Platform=x64"
        working-directory: ${{ github.workspace }}\Cheat Engine\DotNetDataCollector
      - name: Build DotNetInvasiveDataCollector
        if: ${{ success() || failure() }}
        run: "msbuild -property:Configuration=Release"
        working-directory: ${{ github.workspace }}\Cheat Engine\DotNetInvasiveDataCollector\DotNetInterface2
      - name: Build Tcc 32-32
        if: ${{ success() || failure() }}
        run: "msbuild -property:Configuration='Output to 32 (Release)' -property:Platform=Win32"
        working-directory: ${{ github.workspace }}\Cheat Engine\tcclib\win32\tcc
      - name: Build Tcc 32-32 Linux
        if: ${{ success() || failure() }}
        run: "msbuild -property:Configuration='Output to 32 Linux ABI (Release)' -property:Platform=Win32"
        working-directory: ${{ github.workspace }}\Cheat Engine\tcclib\win32\tcc
      - name: Build Tcc 64-32
        if: ${{ success() || failure() }}
        run: "msbuild -property:Configuration='Output to 64 (Release)' -property:Platform=Win32"
        working-directory: ${{ github.workspace }}\Cheat Engine\tcclib\win32\tcc
      - name: Build Tcc 64-32 Linux
        if: ${{ success() || failure() }}
        run: "msbuild -property:Configuration='Output to 64 Linux ABI (Release)' -property:Platform=Win32"
        working-directory: ${{ github.workspace }}\Cheat Engine\tcclib\win32\tcc
      - name: Build Tcc 64-64
        if: ${{ success() || failure() }}
        run: "msbuild -property:Configuration='Output to 64 (Release)' -property:Platform=x64"
        working-directory: ${{ github.workspace }}\Cheat Engine\tcclib\win32\tcc
      - name: Build Tcc 64-64 Linux
        if: ${{ success() || failure() }}
        run: "msbuild -property:Configuration='Output to 64 Linux ABI (Release)' -property:Platform=x64"
        working-directory: ${{ github.workspace }}\Cheat Engine\tcclib\win32\tcc
      - name: Add plugins
        if: ${{ success() || failure() }}
        run: xcopy plugin bin\plugins\ /E/H
        working-directory: ${{ github.workspace }}\Cheat Engine
# todo: build cuda pointerscan (don't forget to apply reg)
# todo: maybe build dbk32
# todo: dl vmdisk from cheat engine site or maybe build dbvm
# todo: maybe build kernelmoduleloader
# todo: build cejvmti
# todo: build both standalonelevel in sfx
      - name: Load Cheat Engine Cache
        if: ${{ success() || failure() }}
        uses: actions/cache@v3
        with:
          path: C:\Program Files\Cheat Engine ${{ steps.get-info.outputs.ce }}
          key: CheatEngine${{ steps.get-info.outputs.ce }}
          fail-on-cache-miss: true
      - name: Copy dbk
        if: ${{ success() || failure() }}
        run: |
          xcopy "C:\Program Files\Cheat Engine ${{ steps.get-info.outputs.ce }}\dbk*.sys" bin\
          xcopy "C:\Program Files\Cheat Engine ${{ steps.get-info.outputs.ce }}\vmdisk.*" bin\
          xcopy "C:\Program Files\Cheat Engine ${{ steps.get-info.outputs.ce }}\Kernelmoduleunloader.exe" bin\
        working-directory: ${{ github.workspace }}\Cheat Engine
      - name: pack files
        if: ${{ success() || failure() }}
        run: ./packfiles.bat
        working-directory: ${{ github.workspace }}\Cheat Engine\bin
      - name: Remove debug files
        if: ${{ success() || failure() }}
        shell: bash
        run: |
          shopt -s globstar
          rm -rf ./**/*.pdb
          rm -rf ./**/*.iobj
          rm -rf ./**/*.ipdb
          rm -rf ./**/*.dbg
        working-directory: ${{ github.workspace }}\Cheat Engine\bin
      - name: Zip artifact
        if: ${{ success() || failure() }}
        run: 7z a -tzip release.zip * -r
        working-directory: "./Cheat Engine/bin"
      - name: Release artifact
        if: ${{ success() || failure() }}
        uses: actions/upload-artifact@v3
        with:
          name: Release
          path: "Cheat Engine/bin/release.zip"
      - name: Send failure webhook
        if: ${{ failure() }}
        uses: sebastianpopp/discord-action@releases/v2
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK_URL }}
          message: Run failed!
      - name: Get build info
        id: get-build-info
        run: py ./.github/workflows/scripts/version.py
      - name: Update release
        uses: ncipollo/release-action@v1
        with:
          prerelease: true
          allowUpdates: true
          removeArtifacts: true
          omitPrereleaseDuringUpdate: true
          artifacts: "Cheat Engine/bin/release.zip"
          body: '<time datetime="${{ steps.get-build-info.outputs.isotime }}">${{ steps.get-build-info.outputs.time }}</time>'
          tag: ${{ steps.get-build-info.outputs.major }}.${{ steps.get-build-info.outputs.minor }}.${{ steps.get-build-info.outputs.revision }}-${{ steps.get-build-info.outputs.build }}
          name: "${{ steps.get-build-info.outputs.major }}.${{ steps.get-build-info.outputs.minor }}.${{ steps.get-build-info.outputs.revision }} (Build: ${{ steps.get-build-info.outputs.build }})"
      - name: Update tag
        uses: richardsimko/update-tag@v1
        with:
          tag_name: ${{ steps.get-build-info.outputs.major }}.${{ steps.get-build-info.outputs.minor }}.${{ steps.get-build-info.outputs.revision }}-${{ steps.get-build-info.outputs.build }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  get-paths:
    runs-on: ubuntu-latest
    if: ${{ !contains(github.event.head_commit.message, '[skip ci]') }}
    outputs:
      vs2013: ${{ steps.get-vs2013-paths.outputs.result }}
      xp: ${{ steps.get-xp-paths.outputs.result }}
      cuda: ${{ steps.get-cuda-paths.outputs.result }}
    steps:
      - uses: actions/github-script@v7
        id: get-vs2013-paths
        with:
          script: return process.env.VS2013Paths
          result-encoding: string
        env:
          VS2013Paths: |
            C:\Program Files (x86)\Common Files\microsoft shared\MSEnv\msenv100p.dll
            C:\Program Files (x86)\Common Files\microsoft shared\MSEnv\msenv110p.dll
            C:\Program Files (x86)\Common Files\microsoft shared\MSEnv\msenv120p.dll
            C:\Program Files (x86)\Common Files\microsoft shared\MSEnv\msenv2p.dll
            C:\Program Files (x86)\Common Files\microsoft shared\MSEnv\msenv80p.dll
            C:\Program Files (x86)\Common Files\microsoft shared\MSEnv\msenv90p.dll
            C:\Program Files (x86)\Common Files\microsoft shared\MSEnv\msenvp.dll
            C:\Program Files (x86)\Common Files\microsoft shared\MSEnv\PublicAssemblies\Microsoft.VisualStudio.VSHelp.dll
            C:\Program Files (x86)\Common Files\microsoft shared\MSEnv\PublicAssemblies\Microsoft.VisualStudio.VSHelp80.dll
            C:\Program Files (x86)\Common Files\microsoft shared\MSEnv\PublicAssemblies\stdole.dll
            C:\Program Files (x86)\Common Files\microsoft shared\MSEnv\PublicAssemblies\VSLangProj.dll
            C:\Program Files (x86)\Common Files\microsoft shared\MSEnv\PublicAssemblies\VSLangProj100.dll
            C:\Program Files (x86)\Common Files\microsoft shared\MSEnv\PublicAssemblies\VSLangProj110.dll
            C:\Program Files (x86)\Common Files\microsoft shared\MSEnv\PublicAssemblies\VSLangProj2.dll
            C:\Program Files (x86)\Common Files\microsoft shared\MSEnv\PublicAssemblies\VSLangProj90.dll
            C:\Program Files (x86)\Common Files\microsoft shared\MSEnv\TextMgrP.dll
            C:\Program Files (x86)\Common Files\microsoft shared\MSEnv\VsLogP.dll
            C:\Program Files (x86)\Common Files\microsoft shared\MSEnv\VSWebLauncher.exe
            C:\Program Files (x86)\Microsoft SDKs\Windows\v8.0A
            C:\Program Files (x86)\Microsoft SDKs\Windows\v8.1
            C:\Program Files (x86)\Microsoft SDKs\Windows\v8.1A
            C:\Program Files (x86)\Microsoft Visual Studio 12.0
            C:\Program Files (x86)\MSBuild\12.0
            C:\Program Files (x86)\MSBuild\Microsoft.Cpp\v4.0\V120
            C:\Program Files (x86)\MSBuild\Microsoft\VisualStudio\v12.0
            C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETCore\v4.5\*.dll
            C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETCore\v4.5\RedistList
            C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v3.5\Profile\Client\*.dll
            C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v3.5\Profile\Client\RedistList
            C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.0
            C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.5
            C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.5.1
            C:\Program Files (x86)\Reference Assemblies\Microsoft\MSBuild\v12.0
            C:\Program Files (x86)\Windows Kits\8.0
            C:\Program Files (x86)\Windows Kits\8.1
            C:\Program Files\Common Files\microsoft shared\MSEnv\VSFileHandler_64.dll
            C:\Program Files\Common Files\microsoft shared\Visual Studio\12.0
            C:\ProgramData\NuGet\Config\VisualStudio\12.0
            C:\Windows\assembly\GAC\EnvDTE\8.0.0.0__b03f5f7f11d50a3a
            C:\Windows\assembly\GAC\EnvDTE80\8.0.0.0__b03f5f7f11d50a3a
            C:\Windows\assembly\GAC\EnvDTE90\9.0.0.0__b03f5f7f11d50a3a
            C:\Windows\assembly\GAC\EnvDTE90a\9.0.0.0__b03f5f7f11d50a3a
            C:\Windows\assembly\GAC\Microsoft.mshtml\7.0.3300.0__b03f5f7f11d50a3a
            C:\Windows\assembly\GAC\Microsoft.VisualStudio.CommandBars\8.0.0.0__b03f5f7f11d50a3a
            C:\Windows\assembly\GAC\Microsoft.VisualStudio.Debugger.Interop\8.0.1.0__b03f5f7f11d50a3a
            C:\Windows\assembly\GAC\Microsoft.VisualStudio.Debugger.InteropA\9.0.0.0__b03f5f7f11d50a3a
            C:\Windows\assembly\GAC\Microsoft.VisualStudio.Designer.Interfaces\1.0.5000.0__b03f5f7f11d50a3a
            C:\Windows\assembly\GAC\Microsoft.VisualStudio.OLE.Interop\7.1.40304.0__b03f5f7f11d50a3a
            C:\Windows\assembly\GAC\Microsoft.VisualStudio.Shell.Interop.8.0\8.0.0.0__b03f5f7f11d50a3a
            C:\Windows\assembly\GAC\Microsoft.VisualStudio.Shell.Interop.9.0\9.0.0.0__b03f5f7f11d50a3a
            C:\Windows\assembly\GAC\Microsoft.VisualStudio.Shell.Interop\7.1.40304.0__b03f5f7f11d50a3a
            C:\Windows\assembly\GAC\Microsoft.VisualStudio.TextManager.Interop.8.0\8.0.0.0__b03f5f7f11d50a3a
            C:\Windows\assembly\GAC\Microsoft.VisualStudio.TextManager.Interop.9.0\9.0.0.0__b03f5f7f11d50a3a
            C:\Windows\assembly\GAC\Microsoft.VisualStudio.TextManager.Interop\7.1.40304.0__b03f5f7f11d50a3a
            C:\Windows\assembly\GAC\Microsoft.VisualStudio.VCCodeModel\12.0.0.0__b03f5f7f11d50a3a
            C:\Windows\assembly\GAC\Microsoft.VisualStudio.VCProject\12.0.0.0__b03f5f7f11d50a3a
            C:\Windows\assembly\GAC\Microsoft.VisualStudio.VCProjectEngine\12.0.0.0__b03f5f7f11d50a3a
            C:\Windows\assembly\GAC\Microsoft.VisualStudio.VSHelp\7.0.3300.0__b03f5f7f11d50a3a
            C:\Windows\assembly\GAC\Microsoft.VisualStudio.VSHelp80\8.0.0.0__b03f5f7f11d50a3a
            C:\Windows\assembly\GAC\VSLangProj\7.0.3300.0__b03f5f7f11d50a3a
            C:\Windows\assembly\GAC\VSLangProj2\7.0.5000.0__b03f5f7f11d50a3a
            C:\Windows\assembly\GAC\VSLangProj80\8.0.0.0__b03f5f7f11d50a3a
            C:\Windows\assembly\GAC\VslangProj90\9.0.0.0__b03f5f7f11d50a3a
            C:\Windows\assembly\GAC_MSIL\EnvDTE100\10.0.0.0__b03f5f7f11d50a3a
            C:\Windows\assembly\GAC_MSIL\Microsoft.MSXML\8.0.0.0__b03f5f7f11d50a3a
            C:\Windows\assembly\GAC_MSIL\Microsoft.VisualStudio.Data.Core\9.0.0.0__b03f5f7f11d50a3a
            C:\Windows\assembly\GAC_MSIL\Microsoft.VisualStudio.Data.Services\9.0.0.0__b03f5f7f11d50a3a
            C:\Windows\assembly\GAC_MSIL\Microsoft.VisualStudio.Debugger.Interop.10.0\10.0.0.0__b03f5f7f11d50a3a
            C:\Windows\assembly\GAC_MSIL\Microsoft.VisualStudio.Debugger.Interop.11.0\11.0.0.0__b03f5f7f11d50a3a
            C:\Windows\assembly\GAC_MSIL\Microsoft.VisualStudio.Debugger.Interop.12.0\12.0.0.0__b03f5f7f11d50a3a
            C:\Windows\assembly\GAC_MSIL\Microsoft.VisualStudio.Debugger.Interop.Internal\12.0.0.0__b03f5f7f11d50a3a
            C:\Windows\assembly\GAC_MSIL\Microsoft.VisualStudio.Debugger.Runtime\12.0.0.0__b03f5f7f11d50a3a
            C:\Windows\assembly\GAC_MSIL\Microsoft.VisualStudio.Debugger.SymbolLocator.Interop\12.0.0.0__b03f5f7f11d50a3a
            C:\Windows\assembly\GAC_MSIL\Microsoft.VisualStudio.DebuggerVisualizers\12.0.0.0__b03f5f7f11d50a3a
            C:\Windows\assembly\GAC_MSIL\Microsoft.VisualStudio.Diagnostics.Measurement\12.0.0.0__b03f5f7f11d50a3a
            C:\Windows\assembly\GAC_MSIL\Microsoft.VisualStudio.HostingProcess.Utilities.Sync\12.0.0.0__b03f5f7f11d50a3a
            C:\Windows\assembly\GAC_MSIL\Microsoft.VisualStudio.HostingProcess.Utilities\12.0.0.0__b03f5f7f11d50a3a
            C:\Windows\assembly\GAC_MSIL\Microsoft.VisualStudio.ManagedInterfaces.9.0\9.0.0.0__b03f5f7f11d50a3a
            C:\Windows\assembly\GAC_MSIL\Microsoft.VisualStudio.ManagedInterfaces.WCF\9.0.0.0__b03f5f7f11d50a3a
            C:\Windows\assembly\GAC_MSIL\Microsoft.VisualStudio.ManagedInterfaces\8.0.0.0__b03f5f7f11d50a3a
            C:\Windows\assembly\GAC_MSIL\Microsoft.VisualStudio.ProjectAggregator\8.0.0.0__b03f5f7f11d50a3a
            C:\Windows\assembly\GAC_MSIL\Microsoft.VisualStudio.QualityTools.AgentObject\12.0.0.0__b03f5f7f11d50a3a
            C:\Windows\assembly\GAC_MSIL\Microsoft.VisualStudio.QualityTools.AgentProcessManager\12.0.0.0__b03f5f7f11d50a3a
            C:\Windows\assembly\GAC_MSIL\Microsoft.VisualStudio.QualityTools.Common\12.0.0.0__b03f5f7f11d50a3a
            C:\Windows\assembly\GAC_MSIL\Microsoft.VisualStudio.QualityTools.DataCollectionAgentObject\12.0.0.0__b03f5f7f11d50a3a
            C:\Windows\assembly\GAC_MSIL\Microsoft.VisualStudio.QualityTools.ExecutionCommon\12.0.0.0__b03f5f7f11d50a3a
            C:\Windows\assembly\GAC_MSIL\Microsoft.VisualStudio.QualityTools.Resource\12.0.0.0__b03f5f7f11d50a3a
            C:\Windows\assembly\GAC_MSIL\Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel\12.0.0.0__b03f5f7f11d50a3a
            C:\Windows\assembly\GAC_MSIL\Microsoft.VisualStudio.QualityTools.TMI\12.0.0.0__b03f5f7f11d50a3a
            C:\Windows\assembly\GAC_MSIL\Microsoft.VisualStudio.QualityTools.UnitTestFramework\10.0.0.0__b03f5f7f11d50a3a
            C:\Windows\assembly\GAC_MSIL\Microsoft.VisualStudio.Shell.Interop.10.0\10.0.0.0__b03f5f7f11d50a3a
            C:\Windows\assembly\GAC_MSIL\Microsoft.VisualStudio.Shell.Interop.11.0\11.0.0.0__b03f5f7f11d50a3a
            C:\Windows\assembly\GAC_MSIL\Microsoft.VisualStudio.Shell.Interop.12.0\12.0.0.0__b03f5f7f11d50a3a
            C:\Windows\assembly\GAC_MSIL\Microsoft.VisualStudio.TemplateWizardInterface\8.0.0.0__b03f5f7f11d50a3a
            C:\Windows\assembly\GAC_MSIL\Microsoft.VisualStudio.TextManager.Interop.10.0\10.0.0.0__b03f5f7f11d50a3a
            C:\Windows\assembly\GAC_MSIL\Microsoft.VisualStudio.TextManager.Interop.11.0\11.0.0.0__b03f5f7f11d50a3a
            C:\Windows\assembly\GAC_MSIL\Microsoft.VisualStudio.TextManager.Interop.12.0\12.0.0.0__b03f5f7f11d50a3a
            C:\Windows\assembly\GAC_MSIL\Microsoft.VisualStudio.VIL.Host\12.0.0.0__b03f5f7f11d50a3a
            C:\Windows\assembly\GAC_MSIL\Microsoft.VisualStudio.VIL\12.0.0.0__b03f5f7f11d50a3a
            C:\Windows\assembly\GAC_MSIL\Microsoft.VisualStudio.WCFReference.Interop\9.0.0.0__b03f5f7f11d50a3a
            C:\Windows\assembly\GAC_MSIL\Microsoft.VisualStudio.Zip.9.0\9.0.0.0__b03f5f7f11d50a3a
            C:\Windows\assembly\GAC_MSIL\MSBuildTaskHost.resources\12.0.0.0_de_b03f5f7f11d50a3a
            C:\Windows\assembly\GAC_MSIL\MSBuildTaskHost.resources\12.0.0.0_es_b03f5f7f11d50a3a
            C:\Windows\assembly\GAC_MSIL\MSBuildTaskHost.resources\12.0.0.0_fr_b03f5f7f11d50a3a
            C:\Windows\assembly\GAC_MSIL\MSBuildTaskHost.resources\12.0.0.0_it_b03f5f7f11d50a3a
            C:\Windows\assembly\GAC_MSIL\MSBuildTaskHost.resources\12.0.0.0_ja_b03f5f7f11d50a3a
            C:\Windows\assembly\GAC_MSIL\MSBuildTaskHost.resources\12.0.0.0_ko_b03f5f7f11d50a3a
            C:\Windows\assembly\GAC_MSIL\MSBuildTaskHost.resources\12.0.0.0_ru_b03f5f7f11d50a3a
            C:\Windows\assembly\GAC_MSIL\MSBuildTaskHost.resources\12.0.0.0_zh-Hans_b03f5f7f11d50a3a
            C:\Windows\assembly\GAC_MSIL\MSBuildTaskHost.resources\12.0.0.0_zh-Hant_b03f5f7f11d50a3a
            C:\Windows\assembly\GAC_MSIL\vsdebugeng.manimpl\12.0.0.0__b03f5f7f11d50a3a
            C:\Windows\assembly\GAC_MSIL\VslangProj100\10.0.0.0__b03f5f7f11d50a3a
            C:\Windows\assembly\GAC_MSIL\VSLangProj110\11.0.0.0__b03f5f7f11d50a3a
            C:\Windows\Microsoft.NET\assembly\**\v4.0_12.0.0.0__b03f5f7f11d50a3a
            C:\Windows\Microsoft.NET\assembly\**\v4.0_12.0.0.0_*_b03f5f7f11d50a3a
            C:\Windows\Microsoft.NET\assembly\GAC_MSIL\CppCodeProvider\v4.0_10.0.0.0__b03f5f7f11d50a3a
            C:\Windows\Microsoft.NET\assembly\GAC_MSIL\Microsoft.VisualStudio.Package.LanguageService.10.0\v4.0_10.0.0.0__b03f5f7f11d50a3a
            C:\Windows\Microsoft.NET\assembly\GAC_MSIL\Microsoft.VisualStudio.Package.LanguageService.11.0\v4.0_11.0.0.0__b03f5f7f11d50a3a
            C:\Windows\Microsoft.NET\assembly\GAC_MSIL\msddslmp\v4.0_11.0.0.0__b03f5f7f11d50a3a
            C:\Windows\Microsoft.NET\assembly\GAC_MSIL\System.Design.VisualStudio.11.0\v4.0_4.0.0.0__b03f5f7f11d50a3a
            C:\Windows\Microsoft.NET\assembly\GAC_MSIL\System.Drawing.VisualStudio.11.0\v4.0_4.0.0.0__b03f5f7f11d50a3a
            C:\Windows\Microsoft.NET\assembly\GAC_MSIL\System.Threading.Tasks.Dataflow\v4.0_4.5.9.0__b03f5f7f11d50a3a
            C:\Windows\Microsoft.NET\assembly\GAC_MSIL\System.VisualStudio.11.0\v4.0_4.0.0.0__b77a5c561934e089
            C:\Windows\Microsoft.NET\assembly\GAC_MSIL\System.Web.DynamicData.VisualStudio.11.0\v4.0_4.0.0.0__31bf3856ad364e35
            C:\Windows\Microsoft.NET\assembly\GAC_MSIL\System.Web.Extensions.Design.VisualStudio.11.0\v4.0_4.0.0.0__31bf3856ad364e35
            C:\Windows\Microsoft.NET\assembly\GAC_MSIL\System.Web.Extensions.VisualStudio.11.0\v4.0_4.0.0.0__31bf3856ad364e35
            C:\Windows\Microsoft.NET\assembly\GAC_MSIL\System.Web.VisualStudio.11.0\v4.0_4.0.0.0__b03f5f7f11d50a3a
            C:\Windows\Microsoft.NET\assembly\GAC_MSIL\System.Windows.Forms.VisualStudio.11.0\v4.0_4.0.0.0__b77a5c561934e089
            C:\Windows\System32\d2d1debug2.dll
            C:\Windows\System32\d3d11_1sdklayers.dll
            C:\Windows\System32\d3d11_2sdklayers.dll
            C:\Windows\System32\d3d11ref.dll
            C:\Windows\System32\d3d11sdklayers.dll
            C:\Windows\System32\mfc120d.dll
            C:\Windows\System32\mfc120ud.dll
            C:\Windows\System32\mfcm120d.dll
            C:\Windows\System32\mfcm120ud.dll
            C:\Windows\System32\msvcp120d.dll
            C:\Windows\System32\msvcr120d.dll
            C:\Windows\System32\vcamp120d.dll
            C:\Windows\System32\vccorlib120d.dll
            C:\Windows\System32\vcomp120d.dll
            C:\Windows\System32\VSD3DRefDebug.dll
            C:\Windows\SysWOW64\mfc120.dll
            C:\Windows\SysWOW64\mfc120chs.dll
            C:\Windows\SysWOW64\mfc120cht.dll
            C:\Windows\SysWOW64\mfc120d.dll
            C:\Windows\SysWOW64\mfc120deu.dll
            C:\Windows\SysWOW64\mfc120enu.dll
            C:\Windows\SysWOW64\mfc120esn.dll
            C:\Windows\SysWOW64\mfc120fra.dll
            C:\Windows\SysWOW64\mfc120ita.dll
            C:\Windows\SysWOW64\mfc120jpn.dll
            C:\Windows\SysWOW64\mfc120kor.dll
            C:\Windows\SysWOW64\mfc120rus.dll
            C:\Windows\SysWOW64\mfc120u.dll
            C:\Windows\SysWOW64\mfc120ud.dll
            C:\Windows\SysWOW64\mfcm120.dll
            C:\Windows\SysWOW64\mfcm120d.dll
            C:\Windows\SysWOW64\mfcm120u.dll
            C:\Windows\SysWOW64\mfcm120ud.dll
            C:\Windows\SysWOW64\msvcp120d.dll
            C:\Windows\SysWOW64\msvcr120d.dll
            C:\Windows\SysWOW64\vcamp120.dll
            C:\Windows\SysWOW64\vcamp120d.dll
            C:\Windows\SysWOW64\vccorlib120d.dll
            C:\Windows\SysWOW64\vcomp120.dll
            C:\Windows\SysWOW64\vcomp120d.dll
          # C:\Windows\Microsoft.NET\assembly\GAC_MSIL\Microsoft.VisualStudio.Diagnostics.ServiceModelSink\v4.0_4.0.0.0__b03f5f7f11d50a3a
          # C:\Windows\Microsoft.NET\Framework64\v4.0.30319\sort00001000.dll
          # C:\Windows\Microsoft.NET\Framework64\v4.0.30319\sort00060101.dll
          # C:\Windows\Microsoft.NET\Framework64\v4.0.30319\sort00060101.nlp
          # C:\Windows\System32\d3d10ref.dll
          # C:\Windows\System32\d3d10sdklayers.dll
          # C:\Windows\System32\d3dref9.dll
          # C:\Windows\System32\dxcapturereplay.dll
          # C:\Windows\System32\dxcpl.exe
          # C:\Windows\System32\dxgidebug.dll
          # C:\Windows\System32\dxtoolsmonitor.dll
          # C:\Windows\System32\mfc120.dll
          # C:\Windows\System32\mfc120chs.dll
          # C:\Windows\System32\mfc120cht.dll
          # C:\Windows\System32\mfc120deu.dll
          # C:\Windows\System32\mfc120enu.dll
          # C:\Windows\System32\mfc120esn.dll
          # C:\Windows\System32\mfc120fra.dll
          # C:\Windows\System32\mfc120ita.dll
          # C:\Windows\System32\mfc120jpn.dll
          # C:\Windows\System32\mfc120kor.dll
          # C:\Windows\System32\mfc120rus.dll
          # C:\Windows\System32\mfc120u.dll
          # C:\Windows\System32\mfcm120.dll
          # C:\Windows\System32\mfcm120u.dll
          # C:\Windows\System32\msvcp100.dll
          # C:\Windows\System32\msvcp120.dll
          # C:\Windows\System32\msvcr100.dll
          # C:\Windows\System32\msvcr120.dll
          # C:\Windows\System32\vcamp120.dll
          # C:\Windows\System32\vccorlib120.dll
          # C:\Windows\System32\vcomp120.dll
          # C:\Windows\System32\vsd3dwarpdebug.dll
          # C:\Windows\SysWOW64\d2d1debug2.dll
          # C:\Windows\SysWOW64\d3d10ref.dll
          # C:\Windows\SysWOW64\d3d10sdklayers.dll
          # C:\Windows\SysWOW64\d3d11_1sdklayers.dll
          # C:\Windows\SysWOW64\d3d11_2sdklayers.dll
          # C:\Windows\SysWOW64\d3d11ref.dll
          # C:\Windows\SysWOW64\d3d11sdklayers.dll
          # C:\Windows\SysWOW64\d3dref9.dll
          # C:\Windows\SysWOW64\dxcapturereplay.dll
          # C:\Windows\SysWOW64\dxcpl.exe
          # C:\Windows\SysWOW64\dxgidebug.dll
          # C:\Windows\SysWOW64\dxtoolsmonitor.dll
          # C:\Windows\SysWOW64\msvcp100.dll
          # C:\Windows\SysWOW64\msvcp120.dll
          # C:\Windows\SysWOW64\msvcr100.dll
          # C:\Windows\SysWOW64\msvcr120.dll
          # C:\Windows\SysWOW64\vccorlib120.dll
          # C:\Windows\SysWOW64\VSD3DRefDebug.dll
          # C:\Windows\SysWOW64\vsd3dwarpdebug.dll
      - uses: actions/github-script@v7
        id: get-xp-paths
        with:
          script: return process.env.XPPaths
          result-encoding: string
        env:
          XPPaths: |
            C:\Program Files (x86)\Microsoft SDKs\Windows\v7.1A
            C:\Program Files\Microsoft Visual Studio\2022\Enterprise\MSBuild\Microsoft\VC\v150\Platforms\**\PlatformToolsets\v141_xp
      - uses: actions/github-script@v7
        id: get-cuda-paths
        with:
          script: return process.env.CUDAPaths
          result-encoding: string
        env:
          CUDAPaths: |
            C:\Program Files\NVIDIA GPU Computing Toolkit
            C:\Program Files (x86)\MSBuild\Microsoft.Cpp\BuildCustomizations\CUDA*
            C:\ProgramData\NVIDIA GPU Computing Toolkit
            ${{ github.workspace }}\CUDA

name: Build Cheat Engine

on:
  workflow_dispatch:
  workflow_call:
  push:
    branches:
      - master

jobs:
  cache-lazarus:
    runs-on: windows-2022
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    steps:
      - uses: actions/checkout@v3
      - name: Get Lazarus info
        shell: bash
        id: get-info
        run: |
          echo "lazarus=$(node ./.github/workflows/scripts/getLazarusVersion.js)" >> $GITHUB_OUTPUT
          echo "fpc=$(node ./.github/workflows/scripts/getFpcVersion.js)" >> $GITHUB_OUTPUT
          echo "dependencies=$(node ./.github/workflows/scripts/getPackages.js)" >> $GITHUB_OUTPUT
      - name: Cache Lazarus
        id: cache-lazarus
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}\work
          key: lazarus-${{ steps.get-info.outputs.lazarus }}-${{ steps.get-info.outputs.fpc }}-${{ format(steps.get-info.outputs.dependencies, '_') }}
      - name: Make working dir
        if: steps.cache-lazarus.outputs.cache-hit != 'true'
        shell: cmd
        run: mkdir ${{ github.workspace }}\work
      - name: Install Lazarus
        if: steps.cache-lazarus.outputs.cache-hit != 'true'
        shell: bash
        run: node ./.github/workflows/scripts/install.js
        env:
          LAZARUS_VERSION: ${{ steps.get-info.outputs.lazarus }}
          FPC_VERSION: ${{ steps.get-info.outputs.fpc }}
      - name: Install 32bit compat
        if: steps.cache-lazarus.outputs.cache-hit != 'true'
        shell: bash
        run: node ./.github/workflows/scripts/install32bitCompat.js
        env:
          LAZARUS_VERSION: ${{ steps.get-info.outputs.lazarus }}
          FPC_VERSION: ${{ steps.get-info.outputs.fpc }}
  cache-vs2013:
    runs-on: windows-2022
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    steps:
      - uses: actions/checkout@v3
      - name: Cache VS2013
        id: cache-vs2013
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}\vs
          key: VS2013
      - name: Set up wget
        if: steps.cache-vs2013.outputs.cache-hit != 'true'
        run: choco install wget
      - name: Download VS2013
        if: steps.cache-vs2013.outputs.cache-hit != 'true'
        shell: cmd
        run: wget https://download.microsoft.com/download/7/2/E/72E0F986-D247-4289-B9DC-C4FB07374894/VS2013_RTM_DskExp_ENU.iso --no-check-certificate
      - name: Unzip VS2013
        if: steps.cache-vs2013.outputs.cache-hit != 'true'
        shell: cmd
        run: 7z x VS2013_RTM_DskExp_ENU.iso -o${{ github.workspace }}\vs
  cache-directx:
    runs-on: windows-2022
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    steps:
      - uses: actions/checkout@v3
      - name: Cache DirectX
        id: cache-directx
        uses: actions/cache@v3
        with:
          path: C:\Program Files (x86)\Microsoft DirectX SDK (June 2010)
          key: DirectX
      - name: Set up wget
        if: steps.cache-directx.outputs.cache-hit != 'true'
        run: choco install wget
      - name: Download DirectX
        if: steps.cache-directx.outputs.cache-hit != 'true'
        shell: cmd
        run: wget https://download.microsoft.com/download/A/E/7/AE743F1F-632B-4809-87A9-AA1BB3458E31/DXSDK_Jun10.exe --no-check-certificate
      - name: Install DirectX
        if: steps.cache-directx.outputs.cache-hit != 'true'
        shell: bash
        run: ./InstallDirectX.bat || true
        working-directory: ${{ github.workspace }}\.github\workflows\scripts
  cache-netdevpack461:
    runs-on: windows-2022
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    steps:
      - uses: actions/checkout@v3
      - name: Cache NETDevPack461
        id: cache-netdevpack461
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}\ndp461-devpack-kb3105179-enu.exe
          key: NETDevPack461
      - name: Set up wget
        if: steps.cache-netdevpack461.outputs.cache-hit != 'true'
        run: choco install wget
      - name: Download NETDevPack461
        if: steps.cache-netdevpack461.outputs.cache-hit != 'true'
        shell: cmd
        run: wget https://download.visualstudio.microsoft.com/download/pr/33a48e6c-c0d1-4321-946b-042b92bad691/a9a88bd451286ab9ea015ecc2208d725/ndp461-devpack-kb3105179-enu.exe --no-check-certificate
  cache-netdevpack472:
    runs-on: windows-2022
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    steps:
      - uses: actions/checkout@v3
      - name: Cache NetDevPack472
        id: cache-netdevpack472
        uses: actions/cache@v3
        with:
          path: C:\Program Files (x86)\Windows Kits\NETFXSDK\4.7.2
          key: NetDevPack472
      - name: Set up wget
        if: steps.cache-netdevpack472.outputs.cache-hit != 'true'
        run: choco install wget
      - name: Download NetDevPack472
        if: steps.cache-netdevpack472.outputs.cache-hit != 'true'
        shell: cmd
        run: wget https://download.visualstudio.microsoft.com/download/pr/158dce74-251c-4af3-b8cc-4608621341c8/9c1e178a11f55478e2112714a3897c1a/ndp472-devpack-enu.exe --no-check-certificate
      - name: Install NetDevPack472
        if: steps.cache-netdevpack472.outputs.cache-hit != 'true'
        shell: bash
        run: ./InstallNETDevPack461.bat || true
        working-directory: ${{ github.workspace }}\.github\workflows\scripts
  build:
    needs: [cache-lazarus, cache-vs2013, cache-directx, cache-netdevpack461, cache-netdevpack472]
    runs-on: windows-2022
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    steps:
      - uses: actions/checkout@v3
      - name: Get Lazarus info
        shell: bash
        id: get-info
        run: |
          echo "lazarus=$(node ./.github/workflows/scripts/getLazarusVersion.js)" >> $GITHUB_OUTPUT
          echo "fpc=$(node ./.github/workflows/scripts/getFpcVersion.js)" >> $GITHUB_OUTPUT
          echo "dependencies=$(node ./.github/workflows/scripts/getPackages.js)" >> $GITHUB_OUTPUT
      - name: Load Lazarus Cache
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}\work
          key: lazarus-${{ steps.get-info.outputs.lazarus }}-${{ steps.get-info.outputs.fpc }}-${{ format(steps.get-info.outputs.dependencies, '_') }}
      - name: Add Lazarus to path
        shell: bash
        run: |
          echo "${{github.workspace}}\work\lazarus" >> $GITHUB_PATH
          echo "${{github.workspace}}\work\lazarus\fpc\${{ steps.get-info.outputs.fpc }}" >> $GITHUB_PATH
      - name: Apply fixes
        shell: bash
        run: py ./.github/workflows/scripts/fixes.py
      - name: Build 32-Bit
        if: always()
        shell: cmd
        run: lazbuild --build-mode="Release 32-bit" --no-write-project "Cheat Engine/cheatengine.lpi"
      - name: Build 64-Bit
        if: always()
        shell: cmd
        run: lazbuild --build-mode="Release 64-bit" --no-write-project "Cheat Engine/cheatengine.lpi"
      - name: Build 64-Bit O4 AVX2
        if: always()
        shell: cmd
        run: lazbuild --build-mode="Release 64-bit O4 AVX2" --no-write-project "Cheat Engine/cheatengine.lpi"
      - name: Build 32-Bit speedhack
        if: always()
        shell: cmd
        run: lazbuild --build-mode="32-bit" --no-write-project "Cheat Engine/speedhack/speedhack.lpi"
      - name: Build 64-Bit speedhack
        if: always()
        shell: cmd
        run: lazbuild --build-mode="64-bit" --no-write-project "Cheat Engine/speedhack/speedhack.lpi"
      - name: Build 32-Bit luaclient
        if: always()
        shell: cmd
        run: lazbuild --build-mode="Release 32" --no-write-project "Cheat Engine/luaclient/luaclient.lpi"
      - name: Build 64-Bit luaclient
        if: always()
        shell: cmd
        run: lazbuild --build-mode="Release 64" --no-write-project "Cheat Engine/luaclient/luaclient.lpi"
      - name: Build 32-Bit vehdebug
        if: always()
        shell: cmd
        run: lazbuild --build-mode="release 32" --no-write-project "Cheat Engine/VEHDebug/vehdebug.lpi"
      - name: Build 64-Bit vehdebug
        if: always()
        shell: cmd
        run: lazbuild --build-mode="release 64" --no-write-project "Cheat Engine/VEHDebug/vehdebug.lpi"
      - name: Load VS2013 Cache
        if: always()
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}\vs
          key: VS2013
      - name: Install VS2013
        if: always()
        shell: cmd
        run: InstallVS2013.bat
        working-directory: ${{ github.workspace }}\.github\workflows\scripts
      - name: Load DirectX Cache
        if: always()
        uses: actions/cache@v3
        with:
          path: C:\Program Files (x86)\Microsoft DirectX SDK (June 2010)
          key: DirectX
      - name: Add msbuild to PATH
        if: always()
        uses: microsoft/setup-msbuild@v1.1.3
      - name: Build 32-Bit Direct x mess
        if: always()
        shell: cmd
        run: "msbuild -property:Configuration=Release -property:Platform=Win32"
        working-directory: ${{ github.workspace }}\Cheat Engine\Direct x mess
      - name: Build 64-Bit Direct x mess
        if: always()
        shell: cmd
        run: "msbuild -property:Configuration=Release -property:Platform=x64"
        working-directory: ${{ github.workspace }}\Cheat Engine\Direct x mess
      - name: Install winxp component on windows 2022
        if: always()
        shell: pwsh
        run: |
          Set-Location "C:\Program Files (x86)\Microsoft Visual Studio\Installer\"
          $InstallPath = "C:\Program Files\Microsoft Visual Studio\2022\Enterprise"
          $componentsToAdd = @(
            "Microsoft.VisualStudio.Component.WinXP"
          )
          [string]$workloadArgs = $componentsToAdd | ForEach-Object {" --add " +  $_}
          $Arguments = ('/c', "vs_installer.exe", 'modify', '--installPath', "`"$InstallPath`"",$workloadArgs, '--quiet', '--norestart', '--nocache')
          $process = Start-Process -FilePath cmd.exe -ArgumentList $Arguments -Wait -PassThru -WindowStyle Hidden
          if ($process.ExitCode -eq 0)
          {
              Write-Host "components have been successfully added"
          }
          else
          {
              Write-Host "components were not installed"
              exit 1
          }
      - name: Load NETDevPack461 Cache
        if: always()
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}\ndp461-devpack-kb3105179-enu.exe
          key: NETDevPack461
      - name: Install NETDevPack461
        if: always()
        shell: bash
        run: ./InstallNETDevPack461.bat || true
        working-directory: ${{ github.workspace }}\.github\workflows\scripts
      - name: Build AnyCPU DotNetCompiler
        if: always()
        shell: cmd
        run: "msbuild -property:Configuration=Release"
        working-directory: ${{ github.workspace }}\Cheat Engine\DotNetCompiler\CSCompiler
      - name: Build 32-Bit MonoDataCollector
        if: always()
        shell: cmd
        run: "msbuild -property:Configuration=Release -property:Platform=Win32"
        working-directory: ${{ github.workspace }}\Cheat Engine\MonoDataCollector
      - name: Build 64-Bit MonoDataCollector
        if: always()
        shell: cmd
        run: "msbuild -property:Configuration=Release -property:Platform=x64"
        working-directory: ${{ github.workspace }}\Cheat Engine\MonoDataCollector
      - name: Load NetDevPack472 Cache
        if: always()
        uses: actions/cache@v3
        with:
          path: C:\Program Files (x86)\Windows Kits\NETFXSDK\4.7.2
          key: NetDevPack472
      - name: Build 32-Bit DotNetDataCollector
        if: always()
        shell: cmd
        run: "msbuild -property:Configuration=Release -property:Platform=Win32"
        working-directory: ${{ github.workspace }}\Cheat Engine\DotNetDataCollector
      - name: Build 64-Bit DotNetDataCollector
        if: always()
        shell: cmd
        run: "msbuild -property:Configuration=Release -property:Platform=x64"
        working-directory: ${{ github.workspace }}\Cheat Engine\DotNetDataCollector
      - name: Build DotNetInvasiveDataCollector
        if: always()
        shell: cmd
        run: "msbuild -property:Configuration=Release"
        working-directory: ${{ github.workspace }}\Cheat Engine\DotNetInvasiveDataCollector\DotNetInterface2
      #cejvmti.sln idk, uses vs 2008
      - name: Zip artifact
        if: always()
        shell: cmd
        run: 7z a -tzip release.zip * -r
        working-directory: "./Cheat Engine/bin"
      - name: Release artifact
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: Release
          path: "Cheat Engine/bin/release.zip"
